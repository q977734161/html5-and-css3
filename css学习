选择器：
	1.属性选择器：
		[attr=val]
		[attr*=val]
		[attr^=val]
		[attr$=val]
		1).[attr=val]：表示如果属性attr的值是val的话就使用该样式；
		2).[attr*=val]：表示如果属性attr的值包含val的话就使用该样式；
		3).[attr^=val]：表示如果属性attr的值是以val开头的话就使用该样式；
		4).[attr$=val]：表示如果属性attr的值是以val结尾的话就使用该样式；

		注意：有些情况下要注意使用"\"转义字符。
			例如：
				<div id="section1-2"></div>

				[id$=\-2]
				{
					....
				}
	2.结构性伪类选择器
		使用方法：
			选择器：伪元素{属性：值}
			或者
			选择器 类名：伪元素{属性：值}
		在css中主要有如下四个伪元素选择器：
			fist-line伪选择器
				用于为某个元素的第一行蚊子使用样式。
			first-letter伪元素选择器
				用于为某个元素中的文字的首字母或者第一个字使用样式。
			before伪元素选择器
				用于在某个元素之前插入一些内容，使用方法：
				<元素>：brefore
				{
					content:插入文字;
					...
				}
				<元素>：brefore
				{
					content:url(test.wav);
					...
				}
			after伪元素选择器
				用于在某个元素之前插入一些内容，使用方法：
				<元素>：after
				{
					content:插入文字;
					font:12px;
					.....
				}
				<元素>：after
				{
					content:url(test.wav);
					...
				}
		选择器root,not,empty和target
			1.root选择器
				root选择器将样式绑定到页面的根元素中。所谓根元素是指位于文档结构树最顶层结构的元素，在html页面中就是指包含着整个页面的"<html>"部分。

				例如：
					<style type="text/css">
					:root
					{
						background-color:yellow;
					}
					body
					{
						background-color:limegreen;
					}
					</style>
					效果为这个页面背景为黄色，body元素的背景色设置为绿色。

					另外，在使用样式指定的root元素与body元素的背景时，根据不同的指定条件，背景显示范围会有所变化。
					例如：
					<style>
					body
					{
						background-color:limegreen;
					}
					</style>
					删除root后背景就为绿色的了。
			2.not选择器
				如果相对某个结构元素使用样式，但是想排除这个结构元素下面的子元素，让它不使用这个样式时，可以使用not选择器。
					例如：
						<style stype='text/css'>
						body *:not(h1)
						{
							background-color:yellow;
						}
						</style>
			3.empty选择器
				用来指定当元素内容为空白时使用的样式。
				<style  type='text/css'>
					:empty{
						background-color:yellow;
					}
				</style>
				<body>
					<table vorder='1' cellpading='0' cellspacing='0'>
						<tr><td>A</td><td>B</td><td>C</td></tr>
						<tr><td>D</td><td>E</td><td></td></tr>
					</table>
				</body>

				运行结果：
					表格第二行最后一个元素背景是黄色的。
			4.target选择器
				对页面中的某个元素（该元素的id被当做页面中的超链接来使用）指定样式，该样式只在用胡点击了页面中的超链接，并且跳转到target元素后起作用。
				<style type='text/css'>
				:target{
					background-color:yellow;
				}
				</style>
				<body>
					<p id="menu">
					<a href="#text1">示例文字1</a>	|
					<a href="#text2">示例文字2</a>	|
					<a href="#text3">示例文字3</a>	|
					<a href="#text4">示例文字4</a>	|
					<a href="#text5">示例文字5</a>	
					</p>
					<div id="text1">
					<h2>示例文字1</h2>
					<p>...此处略去</p>
					</div>

					<div id="text2">
					<h2>示例文字2</h2>
					<p>...此处略去</p>
					</div>

					<div id="text3">
					<h2>示例文字3</h2>
					<p>...此处略去</p>
					</div>

					<div id="text4">
					<h2>示例文字4</h2>
					<p>...此处略去</p>
					</div>

					<div id="text5">
					<h2>示例文字5</h2>
					<p>...此处略去</p>
					</div>
				</body>
				点击链接示例文字1的时候div id="text1"的北京变为黄色。
		选择器：first-child,last-child,nth-child,nth-last-child
			1. 单独指定第一个子元素、最后一个子元素的样式。
				li:first-child{
					background-color:yellow;
				}
				li:last-child{
					background-color:yellow;
				}
			2. 对指定序号的子元素使用样式
				<子元素>:nth-child(n)
				{
					//指定样式
				}
				<子元素>:nth-child{
					//指定样式
				}
			3. 对所有第奇数个子元素或第偶数个子元素使用样式
				nth-child(odd)
				{
					//指定样式
				}
				//所有正数下来的第偶数个子元素
				<子元素>:nth-child(even)
				{
					//指定样式
				}
				//所有正数下来的第奇数个子元素
				<子元素>:nth-child(odd)
				{
					//指定样式
				}
				//所有倒数下来的第偶数个子元素
				<子元素>:nth-last-child(even)
				{
					//指定样式
				}
		选择器:nth-of-type和nth
			1.使用选择器nth-child和nth-last-child是会产生的问题
				nth-child选择器在计算子元素是第奇数个元素还是第偶数个元素的时候，是连同父元素中的所有子元素一起计算的，换句话说就是"h2:nth-child(odd)"这句话的含义，并不是指"针对div元素中第奇数个h2子元素来使用"，而是指"当div元素中的第奇数个子元素如果是h2子元素的时候使用"。
			2.使用选择器nth-of-type和nth-last-of-type
				<style type="text/css">
					h2:nth-of-type(odd)
					{
						background-color:yellow;
					}
					h2:nth-of-type(even)
					{
						background-color:skyblue;
					}
				</style>
		循环使用样式
			只要在"nth-child(n)"语句处，把参数n改为可循环的αn+β的形式就可以。α表示每次循环中包括几种样式，β表示指定的样式在循环中所片的位置，譬如4种北京色作为一组循环：
			<style type='text/css'>
				li:nth-child(4n+1){
					background-color:skyblue;
				}
				li:nth-child(4n+2){
					background-color:limegreen;
				}
				li:nth-child(4n+3){
					background-color:red;
				}
				li:nth-child(4n+4){
					background-color:white;
				}
			</stype>
		only-child选择器
			如果采用如下所示的方法结合运用nth-child选择器与nth-last-child选择器的话，可以指定当某个父元素中只有一个子元素时才使用的样式。
			<子元素>:nth-child(1):nth-last-child(1)
			{
				//指定样式
			}
			使用only-child可以代替nth-child(1):nth-last-child(1)的实现方法。
			另外可以使用nth-of-type(1)：nth-last-of-type(1)代替
	3.UI元素状态伪类选择器
		在css3中，共有11钟UI元素状态伪类选择器，分别是E:hover,E:active,E:focus,E:enable,E:disable,E:read-only,E:read-write,E:checked,E:default,E:indeterminate以及E:selection.
		使用方法如下：
			<元素>:hover{
				//指定样式
			}
			可以在"<元素>"中添加元素的type属性，使用方法如下：
			input[type='text']:hover
			{
				//指定样式
			}
			E:hover :用来指定当鼠标指针移动到元素上面时元素所使用的样式。
			E:active :用来指定元素被激活（鼠标在元素上按下还没有松开）时使用的样式。
			E:focus :用来指定元素获得光标焦点时使用的样式，主要是在文本框控件获得焦点并进行文字输入的时候使用。
			E:enables：用于指定当元素处于可用状态时的样式。
			E:disabled:用于指定当元素处于不可用状态时的样式。
			E:read-only：用来指定当元素处于只读状态时的样式。
			E:read-write：用来指定当元素处于非只读状态时的样式。
			E:checked:用来指定当表单中的radio单选框或者checkbox复选框处于选取状态时的样式。firefox需要写成'-moz-checkd'的形式。
			E:default：用来指定当页面打开时默认处于选取状态的单选框或者复选框控件的样式，及时用户将改单选框或复选框控件的选取状态设置为非选取状态，E:default选择器中指定的样式仍然有效。
			E:indeterminate：用来指定页面打开时，如果一组单选框中任何一个单选框都没有被设定为选取状态时整组单选框的样式，如果用户选取了其中的一个单选框，则改样式被取消指定。
			E:selection：用来指定当元素处于选中状态时的样式。
	通用兄弟元素选择器
		用来指定位于同一个父元素之中的某个元素之后的所有其他种类的兄弟元素所使用的样式，使用方法如下。
			<子元素> ~ <子元素之后的同级兄弟元素>
			{
				//指定样式
			}
使用选择器在页面插入内容
	1.使用选择器来插入
		使用before选择器在元素前面插入内容，使用after选择器在元素后面插入内容，在选择器的content属性中定义要插入的内容。
		例如：
			<style type='text/css'>
				h2:before{
					content:'COLUMN';
					color:white;
					background-color:orange;
					font-family:'Comic Sans MS',Helvetica;
					padding:1px 5px;
					margin-right:10px;
				}
			</style>

		指定个别元素不插入
			<style type='text/css'>
				h2.sample:before{
					content:none;
				}
			</style>
			<h2 class='sample'>不插入</h2>
	2.插入图像文件
		在标题前插入图像文件：插入图像时，需要使用url属性值来指定图像文件的路径
			h2:before{
				content:url(mark.png);
			}
		将alt属性的值作为图像的标题来显示
			如果在content属性中通过"attr(属性名)"这种形式来指定attr属性值，可以将某个属性的属性值显示出来。
			例如：
			 	<style type="text/css">
			 		img:after
			 		{
			 			content:attr(alt);
			 			display:block;
			 			text-align:center;
			 			margin-top:5px
			 		}
			 	</style>
			 	<p><img src='sky.jpg' alt="蓝天白云"/></p>
	3.使用content属性来插入项目编号
		a.在content属性中使用counter属性来针对对多个项目追加连续编号，使用犯法如下：
			<元素>:before{
				countent:counter(计数器名);
			}
			使用计数器来计算编号，计数器可以任意命名。
			另外，还需要在元素的样式中追加对元素的counter-increment属性的指定，为了使用连续的编号，需要将counter-increment属性的属性值设置为before选择器或者after选择器的counter属性值中所指定的计数器名。代码如下：
			<元素>
			{
				counter-increment:before选择器或者after选择器中指定的计数器名称。
			}

				<stype type='text/css'>
				h1:before{
					content:counter(mycounter);
				}
				h1
				{
					counter-increment:mycounter;
				}
				</style>

				<h1>大标题</h1>
				<p>实例文字</p>
				<h1>大标题</h1>
				<p>实例文字</p>
				<h1>大标题</h1>
				<p>实例文字</p>
		b.在项目编号中追加文字
			h1:before{
				counter:'第'counter(mycounter)'章';
			}
		c.指定编号的样式
			h1:before{
				counter:'第'counter(mycounter)'章';
				color:blue;
				font-size:42px;
			}
		d.指定编号的类型
			用before选择器或者after选择器的content属性，不仅可以追加数字编号。还可以追加字母编号或者罗马数字编号，例如
			content:counter(计数器名，编号种类)

			h1:before{
				counter:'第'counter(mycounter,upper-alpha)'章';
				color:blue;
				font-size:42px;
			}
		e.编号嵌套
			可以在大编号中嵌套中编号，在中编号中嵌套小编号。
			<style type="text/css">
				h1:before{
					content:counter(mycounter)'.';
				}
				h1{
					counter-increment:mycounter;
					/*将大标题中使用counter-reset属性将中编号进行重置*/
					counter-reset:subcounter;
				}
				h2:before{
					content:counter(subcounter)'.';
				}
				h2{
					counter-increment:subcounter;
					margin-left:40px;
				}
				
			<style>
				<h1>大标题</h1>
			<h2>中标题</h2>
			<h2>中标题</h2>
			<h2>中标题</h2>
			<h2>中标题</h2>
			<h2>中标题</h2>
			<h2>中标题</h2>
			<h1>大标题</h1>
			<h2>中标题</h2>
			<h2>中标题</h2>
			<h2>中标题</h2>
			<h2>中标题</h2>
			<h2>中标题</h2>
			<h2>中标题</h2>

		f.中编号中嵌入大编号
			h2:before{
					content:counter(mycounter)'-'counter(subcounter)'.';
				}
		g.在字符串两边添加嵌套文字符号
			可以使用content属性的open-quote属性值与close-quote属性值在字符串两边添加如括号、单引号、双引号之类的嵌套文字符号。
			在元素的quotes属性来指定使用什么嵌套文字符号。
			<style type='text/css'>
				h1:before{
					content:open-quote;
				}
				h1:after{
					content:close-quote;
				}
				h1{
					quotes:"(" ")"
				}
			</style>
			<h1>标题</h1>
文字与字体相关样式
	1.给文字添加阴影--text-shadow属性
		1.1使用方法
			text-shadow:length length length color
			前面三个length分别指阴影离开文字的横方向距离，阴影离开文字的纵方向距离和阴影的模糊半径，color指的是阴影的颜色。
			例如：
				<stype type="text/css">
					div{
						text-shadow:5px 5px 5px gray;
						color:navy;
						font-size:50px;
						font-weight:bold;
						font-family:宋体；
					}
				<style>

				<div>你好</div>
		1.2指定多个阴影
			指定多个阴影时使用逗号将多个阴影进行分割。
			<stype type="text/css">
					div{
						text-shadow:10px 10px #f39800,
									40px 35px #fff100,
									70px 60px #c0ff00;
						color:navy;
						font-size:50px;
						font-weight:bold;
						font-family:宋体；
					}
				<style>

				<div>你好</div>
	2.让文本自动换行----word-break属性
		在css3中，使用word-break属性来让文字自动换行。不仅仅可以让浏览器实现半角空格或链子符和面的换行，而且可以让浏览器实现任意位置的换行，使用方法如下：
			<style type='text/css'>
				div{
					word-break:keep-all;
				}
			</style>
		word-break属性值：
		值									换行规则
		normal								使用浏览器默认换行规则
		keep-all							只能在半角空格或连字符处换行
		break-all							允许在单词内换行
	3.让长单词与URL地址自动换行--word-wrap属性
		使用方法如下：
			div{
				word-wrap:break-word;
			}
			word-wrap属性可以使用的属性值为normal和beak-word两个：
				normal:使用浏览器保持默认处理。
				break-word:可以在长单词或URL地址内部进行换行。
	4.使用服务端字体---Web Font与@font-face属性
		在网页上显示服务器端字体
			在css3中，可以使用@font-face属性来利用服务器端字体，@font-face的使用方法如下所示：
				@font-face
				{
					font-family:WebFont;
					src:url('font/Fontin_Sans_R_45b.oft') format('opentype');
					font-weight:normal;
				}

				到目前为止可以使用的文件格式为OpenType格式和TrueType格式，使用OpenType格式时将format属性值设定为opentype,使用TrueType文件格式时将format属性设置为trutype.OpenType的文件扩展名为".otf",TrueType文件扩展名为".ttf"
		显示客户端本地的字体
			@font-face属性不仅可以用于显示服务端的字体，也可以用来显示客户端本地的字体。
			使用@font-face属性显示客户端本地的字体时，需要将字体文本路径的URL属性值修改为"local()"形式的属性值，并且在"local"后面的括号中写入使用的字体。
				例如：
					<style type="text/css">
						@font-face{
							font-family:Arial;
							src:local("Arial");
						}	
					</style>
		属性指的指定
			在@font-face属性中，可以指定的属性值如表15-2所示。

			属性值 					说明					取值范围
			font-family			设置字体系列的名称
			----------------------------------------------------
														notmal:不使用斜体
														italic:使用斜体
			font-style			设置字体的样式			inherit:从父元素继承
														oblique:使用倾斜体
			-------------------------------------------------------------
														normal:使用浏览器的默认值
			font-variant		设置字体的大小写			samll-caps:使用小型大写字母
														inherit:从父元素元素继承
			--------------------------------------------------------------
														normal:使用浏览器的默认值
														bold:使用粗体字符
			font-weight			设置字体的粗细			bolder：使用更粗字符
														lighter:使用更细字符
														100-900：从细到粗定义字符，使用的值必须为100的整数倍，其中400等同于nornmal，700等同于bold
			--------------------------------------------------------------
														normal:默认值，把伸缩比例设置为标准
														wider：把伸展比例设置为更进一步的伸展值
														narrowwe:把收缩比例设置为更进一步的收缩值
														ultra-condensed
														extra-condensed
														condensed
														semi-condensed
														semi-expanded
			font-stretch		设置字体是否伸缩变形		expanded
														extra-expanded
														ultra-expanded:
														设置字体的缩放比例
														'ultra-condensed'是最宽的值，
														'ultra-expanded'是最窄的值
			---------------------------------------------------------------------
			font-size			设置字体大小
			---------------------------------------------------------------------
			src 				设置字体文件的路径
			---------------------------------------------------------------------

	5.修改字体种类而保持字体尺寸不变--font-size-adjust属性

		如果改了字体的种类，则页面的中所有使用改字体的文字大小都有可能发生变化，从而使得原来安排好的页面布局产生混乱。可以使用font-size-adjust属性达到修改字体种类二保持文字大小不会发生变化。
		font-size-adjust属性需要使用每个字体中类自带的一个aspect值（比例值），使用方法如下：
			div{
				font-size:16px;
				font-family:Times New Roman;
				font-size-adjust:0.46;
			}

		在font-size-adjust属性中指定aspect值并且将字体修改为其他字体后，浏览区对于修改后的字体尺寸计算公式如下所示：
			c = ( a / b ) s
			其中，a表示实际使用的字体的aspect值，表示修改前字体的aspect值，s表示指定的字体尺寸，c为浏览器实际显示时的字体尺寸。

其他：
	去掉li前面的点
		li{
			list-style-type: none;
		}
