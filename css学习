选择器：
	1.属性选择器：
		[attr=val]
		[attr*=val]
		[attr^=val]
		[attr$=val]
		1).[attr=val]：表示如果属性attr的值是val的话就使用该样式；
		2).[attr*=val]：表示如果属性attr的值包含val的话就使用该样式；
		3).[attr^=val]：表示如果属性attr的值是以val开头的话就使用该样式；
		4).[attr$=val]：表示如果属性attr的值是以val结尾的话就使用该样式；

		注意：有些情况下要注意使用"\"转义字符。
			例如：
				<div id="section1-2"></div>

				[id$=\-2]
				{
					....
				}
	2.结构性伪类选择器
		使用方法：
			选择器：伪元素{属性：值}
			或者
			选择器 类名：伪元素{属性：值}
		在css中主要有如下四个伪元素选择器：
			fist-line伪选择器
				用于为某个元素的第一行蚊子使用样式。
			first-letter伪元素选择器
				用于为某个元素中的文字的首字母或者第一个字使用样式。
			before伪元素选择器
				用于在某个元素之前插入一些内容，使用方法：
				<元素>：brefore
				{
					content:插入文字;
					...
				}
				<元素>：brefore
				{
					content:url(test.wav);
					...
				}
			after伪元素选择器
				用于在某个元素之前插入一些内容，使用方法：
				<元素>：after
				{
					content:插入文字;
					font:12px;
					.....
				}
				<元素>：after
				{
					content:url(test.wav);
					...
				}
		选择器root,not,empty和target
			1.root选择器
				root选择器将样式绑定到页面的根元素中。所谓根元素是指位于文档结构树最顶层结构的元素，在html页面中就是指包含着整个页面的"<html>"部分。

				例如：
					<style type="text/css">
					:root
					{
						background-color:yellow;
					}
					body
					{
						background-color:limegreen;
					}
					</style>
					效果为这个页面背景为黄色，body元素的背景色设置为绿色。

					另外，在使用样式指定的root元素与body元素的背景时，根据不同的指定条件，背景显示范围会有所变化。
					例如：
					<style>
					body
					{
						background-color:limegreen;
					}
					</style>
					删除root后背景就为绿色的了。
			2.not选择器
				如果相对某个结构元素使用样式，但是想排除这个结构元素下面的子元素，让它不使用这个样式时，可以使用not选择器。
					例如：
						<style stype='text/css'>
						body *:not(h1)
						{
							background-color:yellow;
						}
						</style>
			3.empty选择器
				用来指定当元素内容为空白时使用的样式。
				<style  type='text/css'>
					:empty{
						background-color:yellow;
					}
				</style>
				<body>
					<table vorder='1' cellpading='0' cellspacing='0'>
						<tr><td>A</td><td>B</td><td>C</td></tr>
						<tr><td>D</td><td>E</td><td></td></tr>
					</table>
				</body>

				运行结果：
					表格第二行最后一个元素背景是黄色的。
			4.target选择器
				对页面中的某个元素（该元素的id被当做页面中的超链接来使用）指定样式，该样式只在用胡点击了页面中的超链接，并且跳转到target元素后起作用。
				<style type='text/css'>
				:target{
					background-color:yellow;
				}
				</style>
				<body>
					<p id="menu">
					<a href="#text1">示例文字1</a>	|
					<a href="#text2">示例文字2</a>	|
					<a href="#text3">示例文字3</a>	|
					<a href="#text4">示例文字4</a>	|
					<a href="#text5">示例文字5</a>	
					</p>
					<div id="text1">
					<h2>示例文字1</h2>
					<p>...此处略去</p>
					</div>

					<div id="text2">
					<h2>示例文字2</h2>
					<p>...此处略去</p>
					</div>

					<div id="text3">
					<h2>示例文字3</h2>
					<p>...此处略去</p>
					</div>

					<div id="text4">
					<h2>示例文字4</h2>
					<p>...此处略去</p>
					</div>

					<div id="text5">
					<h2>示例文字5</h2>
					<p>...此处略去</p>
					</div>
				</body>
				点击链接示例文字1的时候div id="text1"的北京变为黄色。
		选择器：first-child,last-child,nth-child,nth-last-child
			1. 单独指定第一个子元素、最后一个子元素的样式。
				li:first-child{
					background-color:yellow;
				}
				li:last-child{
					background-color:yellow;
				}
			2. 对指定序号的子元素使用样式
				<子元素>:nth-child(n)
				{
					//指定样式
				}
				<子元素>:nth-child{
					//指定样式
				}
			3. 对所有第奇数个子元素或第偶数个子元素使用样式
				nth-child(odd)
				{
					//指定样式
				}
				//所有正数下来的第偶数个子元素
				<子元素>:nth-child(even)
				{
					//指定样式
				}
				//所有正数下来的第奇数个子元素
				<子元素>:nth-child(odd)
				{
					//指定样式
				}
				//所有倒数下来的第偶数个子元素
				<子元素>:nth-last-child(even)
				{
					//指定样式
				}
		选择器:nth-of-type和nth
			1.使用选择器nth-child和nth-last-child是会产生的问题
				nth-child选择器在计算子元素是第奇数个元素还是第偶数个元素的时候，是连同父元素中的所有子元素一起计算的，换句话说就是"h2:nth-child(odd)"这句话的含义，并不是指"针对div元素中第奇数个h2子元素来使用"，而是指"当div元素中的第奇数个子元素如果是h2子元素的时候使用"。
			2.使用选择器nth-of-type和nth-last-of-type
				<style type="text/css">
					h2:nth-of-type(odd)
					{
						background-color:yellow;
					}
					h2:nth-of-type(even)
					{
						background-color:skyblue;
					}
				</style>
		循环使用样式
			只要在"nth-child(n)"语句处，把参数n改为可循环的αn+β的形式就可以。α表示每次循环中包括几种样式，β表示指定的样式在循环中所片的位置，譬如4种北京色作为一组循环：
			<style type='text/css'>
				li:nth-child(4n+1){
					background-color:skyblue;
				}
				li:nth-child(4n+2){
					background-color:limegreen;
				}
				li:nth-child(4n+3){
					background-color:red;
				}
				li:nth-child(4n+4){
					background-color:white;
				}
			</stype>
		only-child选择器
			如果采用如下所示的方法结合运用nth-child选择器与nth-last-child选择器的话，可以指定当某个父元素中只有一个子元素时才使用的样式。
			<子元素>:nth-child(1):nth-last-child(1)
			{
				//指定样式
			}
			使用only-child可以代替nth-child(1):nth-last-child(1)的实现方法。
			另外可以使用nth-of-type(1)：nth-last-of-type(1)代替
	3.UI元素状态伪类选择器
		在css3中，共有11钟UI元素状态伪类选择器，分别是E:hover,E:active,E:focus,E:enable,E:disable,E:read-only,E:read-write,E:checked,E:default,E:indeterminate以及E:selection.
		使用方法如下：
			<元素>:hover{
				//指定样式
			}
			可以在"<元素>"中添加元素的type属性，使用方法如下：
			input[type='text']:hover
			{
				//指定样式
			}
			E:hover :用来指定当鼠标指针移动到元素上面时元素所使用的样式。
			E:active :用来指定元素被激活（鼠标在元素上按下还没有松开）时使用的样式。
			E:focus :用来指定元素获得光标焦点时使用的样式，主要是在文本框控件获得焦点并进行文字输入的时候使用。
			E:enables：用于指定当元素处于可用状态时的样式。
			E:disabled:用于指定当元素处于不可用状态时的样式。
			E:read-only：用来指定当元素处于只读状态时的样式。
			E:read-write：用来指定当元素处于非只读状态时的样式。
			E:checked:用来指定当表单中的radio单选框或者checkbox复选框处于选取状态时的样式。firefox需要写成'-moz-checkd'的形式。
			E:default：用来指定当页面打开时默认处于选取状态的单选框或者复选框控件的样式，及时用户将改单选框或复选框控件的选取状态设置为非选取状态，E:default选择器中指定的样式仍然有效。
			E:indeterminate：用来指定页面打开时，如果一组单选框中任何一个单选框都没有被设定为选取状态时整组单选框的样式，如果用户选取了其中的一个单选框，则改样式被取消指定。
			E:selection：用来指定当元素处于选中状态时的样式。
	通用兄弟元素选择器
		用来指定位于同一个父元素之中的某个元素之后的所有其他种类的兄弟元素所使用的样式，使用方法如下。
			<子元素> ~ <子元素之后的同级兄弟元素>
			{
				//指定样式
			}
使用选择器在页面插入内容
	1.使用选择器来插入
		使用before选择器在元素前面插入内容，使用after选择器在元素后面插入内容，在选择器的content属性中定义要插入的内容。
		例如：
			<style type='text/css'>
				h2:before{
					content:'COLUMN';
					color:white;
					background-color:orange;
					font-family:'Comic Sans MS',Helvetica;
					padding:1px 5px;
					margin-right:10px;
				}
			</style>

		指定个别元素不插入
			<style type='text/css'>
				h2.sample:before{
					content:none;
				}
			</style>
			<h2 class='sample'>不插入</h2>
	2.插入图像文件
		在标题前插入图像文件：插入图像时，需要使用url属性值来指定图像文件的路径
			h2:before{
				content:url(mark.png);
			}
		将alt属性的值作为图像的标题来显示
			如果在content属性中通过"attr(属性名)"这种形式来指定attr属性值，可以将某个属性的属性值显示出来。
			例如：
			 	<style type="text/css">
			 		img:after
			 		{
			 			content:attr(alt);
			 			display:block;
			 			text-align:center;
			 			margin-top:5px
			 		}
			 	</style>
			 	<p><img src='sky.jpg' alt="蓝天白云"/></p>
	3.使用content属性来插入项目编号
		a.在content属性中使用counter属性来针对对多个项目追加连续编号，使用犯法如下：
			<元素>:before{
				countent:counter(计数器名);
			}
			使用计数器来计算编号，计数器可以任意命名。
			另外，还需要在元素的样式中追加对元素的counter-increment属性的指定，为了使用连续的编号，需要将counter-increment属性的属性值设置为before选择器或者after选择器的counter属性值中所指定的计数器名。代码如下：
			<元素>
			{
				counter-increment:before选择器或者after选择器中指定的计数器名称。
			}

				<stype type='text/css'>
				h1:before{
					content:counter(mycounter);
				}
				h1
				{
					counter-increment:mycounter;
				}
				</style>

				<h1>大标题</h1>
				<p>实例文字</p>
				<h1>大标题</h1>
				<p>实例文字</p>
				<h1>大标题</h1>
				<p>实例文字</p>
		b.在项目编号中追加文字
			h1:before{
				counter:'第'counter(mycounter)'章';
			}
		c.指定编号的样式
			h1:before{
				counter:'第'counter(mycounter)'章';
				color:blue;
				font-size:42px;
			}
		d.指定编号的类型
			用before选择器或者after选择器的content属性，不仅可以追加数字编号。还可以追加字母编号或者罗马数字编号，例如
			content:counter(计数器名，编号种类)

			h1:before{
				counter:'第'counter(mycounter,upper-alpha)'章';
				color:blue;
				font-size:42px;
			}
		e.编号嵌套
			可以在大编号中嵌套中编号，在中编号中嵌套小编号。
			<style type="text/css">
				h1:before{
					content:counter(mycounter)'.';
				}
				h1{
					counter-increment:mycounter;
					/*将大标题中使用counter-reset属性将中编号进行重置*/
					counter-reset:subcounter;
				}
				h2:before{
					content:counter(subcounter)'.';
				}
				h2{
					counter-increment:subcounter;
					margin-left:40px;
				}
				
			<style>
				<h1>大标题</h1>
			<h2>中标题</h2>
			<h2>中标题</h2>
			<h2>中标题</h2>
			<h2>中标题</h2>
			<h2>中标题</h2>
			<h2>中标题</h2>
			<h1>大标题</h1>
			<h2>中标题</h2>
			<h2>中标题</h2>
			<h2>中标题</h2>
			<h2>中标题</h2>
			<h2>中标题</h2>
			<h2>中标题</h2>

		f.中编号中嵌入大编号
			h2:before{
					content:counter(mycounter)'-'counter(subcounter)'.';
				}
		g.在字符串两边添加嵌套文字符号
			可以使用content属性的open-quote属性值与close-quote属性值在字符串两边添加如括号、单引号、双引号之类的嵌套文字符号。
			在元素的quotes属性来指定使用什么嵌套文字符号。
			<style type='text/css'>
				h1:before{
					content:open-quote;
				}
				h1:after{
					content:close-quote;
				}
				h1{
					quotes:"(" ")"
				}
			</style>
			<h1>标题</h1>
文字与字体相关样式
	1.给文字添加阴影--text-shadow属性
		1.1使用方法
			text-shadow:length length length color
			前面三个length分别指阴影离开文字的横方向距离，阴影离开文字的纵方向距离和阴影的模糊半径，color指的是阴影的颜色。
			例如：
				<stype type="text/css">
					div{
						text-shadow:5px 5px 5px gray;
						color:navy;
						font-size:50px;
						font-weight:bold;
						font-family:宋体；
					}
				<style>

				<div>你好</div>
		1.2指定多个阴影
			指定多个阴影时使用逗号将多个阴影进行分割。
			<stype type="text/css">
					div{
						text-shadow:10px 10px #f39800,
									40px 35px #fff100,
									70px 60px #c0ff00;
						color:navy;
						font-size:50px;
						font-weight:bold;
						font-family:宋体；
					}
				<style>

				<div>你好</div>
	2.让文本自动换行----word-break属性
		在css3中，使用word-break属性来让文字自动换行。不仅仅可以让浏览器实现半角空格或链子符和面的换行，而且可以让浏览器实现任意位置的换行，使用方法如下：
			<style type='text/css'>
				div{
					word-break:keep-all;
				}
			</style>
		word-break属性值：
		值									换行规则
		normal								使用浏览器默认换行规则
		keep-all							只能在半角空格或连字符处换行
		break-all							允许在单词内换行
	3.让长单词与URL地址自动换行--word-wrap属性
		使用方法如下：
			div{
				word-wrap:break-word;
			}
			word-wrap属性可以使用的属性值为normal和beak-word两个：
				normal:使用浏览器保持默认处理。
				break-word:可以在长单词或URL地址内部进行换行。
	4.使用服务端字体---Web Font与@font-face属性
		在网页上显示服务器端字体
			在css3中，可以使用@font-face属性来利用服务器端字体，@font-face的使用方法如下所示：
				@font-face
				{
					font-family:WebFont;
					src:url('font/Fontin_Sans_R_45b.oft') format('opentype');
					font-weight:normal;
				}

				到目前为止可以使用的文件格式为OpenType格式和TrueType格式，使用OpenType格式时将format属性值设定为opentype,使用TrueType文件格式时将format属性设置为trutype.OpenType的文件扩展名为".otf",TrueType文件扩展名为".ttf"
		显示客户端本地的字体
			@font-face属性不仅可以用于显示服务端的字体，也可以用来显示客户端本地的字体。
			使用@font-face属性显示客户端本地的字体时，需要将字体文本路径的URL属性值修改为"local()"形式的属性值，并且在"local"后面的括号中写入使用的字体。
				例如：
					<style type="text/css">
						@font-face{
							font-family:Arial;
							src:local("Arial");
						}	
					</style>
		属性指的指定
			在@font-face属性中，可以指定的属性值如表15-2所示。

			属性值 					说明					取值范围
			font-family			设置字体系列的名称
			----------------------------------------------------
														notmal:不使用斜体
														italic:使用斜体
			font-style			设置字体的样式			inherit:从父元素继承
														oblique:使用倾斜体
			-------------------------------------------------------------
														normal:使用浏览器的默认值
			font-variant		设置字体的大小写			samll-caps:使用小型大写字母
														inherit:从父元素元素继承
			--------------------------------------------------------------
														normal:使用浏览器的默认值
														bold:使用粗体字符
			font-weight			设置字体的粗细			bolder：使用更粗字符
														lighter:使用更细字符
														100-900：从细到粗定义字符，使用的值必须为100的整数倍，其中400等同于nornmal，700等同于bold
			--------------------------------------------------------------
														normal:默认值，把伸缩比例设置为标准
														wider：把伸展比例设置为更进一步的伸展值
														narrowwe:把收缩比例设置为更进一步的收缩值
														ultra-condensed
														extra-condensed
														condensed
														semi-condensed
														semi-expanded
			font-stretch		设置字体是否伸缩变形		expanded
														extra-expanded
														ultra-expanded:
														设置字体的缩放比例
														'ultra-condensed'是最宽的值，
														'ultra-expanded'是最窄的值
			---------------------------------------------------------------------
			font-size			设置字体大小
			---------------------------------------------------------------------
			src 				设置字体文件的路径
			---------------------------------------------------------------------

	5.修改字体种类而保持字体尺寸不变--font-size-adjust属性

		如果改了字体的种类，则页面的中所有使用改字体的文字大小都有可能发生变化，从而使得原来安排好的页面布局产生混乱。可以使用font-size-adjust属性达到修改字体种类二保持文字大小不会发生变化。
		font-size-adjust属性需要使用每个字体中类自带的一个aspect值（比例值），使用方法如下：
			div{
				font-size:16px;
				font-family:Times New Roman;
				font-size-adjust:0.46;
			}
盒相关样式
	1.盒的类型
		1.1基本类型
			在css中的盒分为block类型和inline类型。例如：div元素与p元素属于block类型，span与a元素属于inline类型。每一行中只允许容纳一个block类型的元素，inline类型的元素宽度等于其内容的宽度。每行可以容纳多个inline元素。
		1.2 inline-block类型
			inline-block类型盒属于block类型盒的一种，但是在显示时它具有inline类型盒的特点。
			width属性和height属性分别用来指定元素的宽度与高度，它只能使用在block类型的元素上。
			默认情况下使用inline-block类型时并列显示的元素的垂直对齐方式是底部对其，为了将垂直对齐方式改为顶部对齐，还要在div元素的样式中假如vertical-align
			1.2.1使用inline-block类型来显示水平菜单
				<style type='text/css'>
					ul{
						margin:0;
						padding:0;
					}
					li{
						display:inline-block;
						width:10px;
						padding:10px 0;
						background-color:#00ccff;
						border:solid 1px #666666;
						text-align:center;
					}
					a{
						color:#000000;
						text-decoration:none;
					}
				</style>
		1.3使用inline-table类型
			table{
				display:inline-table;
				border:solid 3px #00aaff;
				vertical-algin:bottom;
			}
		1.4 list-item类型
			如果在display属性中将元素的类型设定为list-item类型，可以将多个元素作为列表来显示，同时在元素的开头加上列表的标记。
			例如：使用display属性将这些div元素的类型设定为list-item类型，使用list-style-type属性将列表标记为circle，最终显示页面中的div元素以列表形式呈现。
			<style type='text/css'>
				div{
					display:list-item;
					list-style-type:circle;
					margin-left:30px;
				}
			</style>
			<div>示例div1</div>
			<div>示例div2</div>
			<div>示例div3</div>
			<div>示例div4</div>
		1.5 run-in类型与compact类型
			将元素指定为run-in类型或者compact类型的时候，如果元素后面还有block类型的元素，run-in类型的元素将被包含在block类型元素的内部，而compact类型的元素将被放置在block类型的元素左面。
			<style type='text/css'>
				dl#runin dt{
					display:run-in;
					border:solid 2px red;
				}
				dl#compact dt{
					display:compact;
					border:solid 2px red;
				}
				dd{
					margin-left:100px;
					background-color:yellow;
				}
			</style>

			<dl id="runin">
			<dt>名词一</dt>
			<dd>关于"名词一"的名词解释</dd>
			</dl>

			<dl id="compact">
			<dt>名词二</dt>
			<dd>关于"名词二"的名词解释</dd>
			</dl>
		1.6表格相关类型
			在CSS3中所有表格相关的元素及其所有属性类型如表16-1所示。
			元素			所属类型					说明
			table 		table 				代表整个表格
			table 		inline-table 		代表整个表格，可以被指定为table类型，也可以被指定为inlne-table类型
			tr 			table-row			代表表格中的一行
			td 			table-cell      	代表表格中的单元格
			th   		table-cell 			代表表格中的列标题
			tbody 		table-row-group 	代表表格中的所有行
			thead 		table-header-group 	代表表格中的表头部分
			tfoot 		table-footer-group	代表表格中的脚注部分
			col 		table-column		代表表格中的一列
			colgroup 	table-column-group 	代表表格中的所有列
			caption		table-capton 		代表整个表格的标题

			例如：
			<style type='text/css'>
				.table
				{
					display:table;
					border:solid 3px #00aaff;
				}
				.caption{
					display:table-caption;
					text-algin:center;
				}
				.tr{
					display:table-row;
				}
				.td{
					display:table-cell;
					border:solid 2px #aaff00;
					padding:10px;
				}
				.thead{
					display:table-header-group;
					background-color:#ffffaa;
				}
			</style>

			<div class ='table'>
				<div class='caption'>字母表</div>
				<div class='thead'>
					<div class='tr'>
						<div class='td'>1st</div>
						<div class='td'>1st</div>
						<div class='td'>1st</div>
						<div class='td'>1st</div>
						<div class='td'>1st</div>
					</div>
					<div class='tr'>
						<div class='td'>A</div>
						<div class='td'>B</div>
						<div class='td'>C</div>
						<div class='td'>D</div>
						<div class='td'>E</div>
					</div>
				</div>
			</div>
		1.7 none类型
			将元素类型指定为none类型后，该元素将不会被显示。
	2.对于盒中容纳不下的内容的显示
		2.1、overflow属性
			可以使用overflow属性来指定对于盒中容纳不下的内容的显示方法。
			
			如果在div元素的样式代码中假如overflow属性，并且将属性值设置为hidden，超出容纳范围的文字将被隐藏起来。div元素修改后的样式代码如下所示。
			<style type="text/css">
				div{
					overflow:hidden;
					width:300px;
					height:150px;
					border:solid 1px red;
				}
			</style>

			如果将overflow属性的属性值设定为scroll,则div元素中出现的固定水平的滚动条与垂直滚动条，文字超出div元素的容纳范围时将滚动显示。div元素修改后的样式代码如下所示：
				<style type="text/css">
					div{
						overflow:overflow;
						width:300px;
						height:150px;
						border:solid 1px red;
					}
				</style>

			如果将overflow属性的属性值设定为auto，则当文字超出div元素的容纳范围时根据需要出现水平滚动条和垂直滚动条，并且滚动显示超出容纳噶范围的内容：
				<style type="text/css">
					div{
						overflow:auto;
						width:300px;
						height:150px;
						border:solid 1px red;
					}
				</style>

			如果将overflow属性的属性值设定为visible，则效果与不使用overflow属性时一样，超出容纳范围的文字依原样显示：
				<style type="text/css">
					div{
						overflow:visible;
						width:300px;
						height:150px;
						border:solid 1px red;
					}
				</style>
		2.2、overflow-x属性和overflow-y属性
			可以指定在水平方向上或者垂直方向上内容超出盒的容纳范围时的显示方法；

		2.3、text-overfloe属性
			当通过overflow属性的属性值设定为"hidden"的方法，将盒中容纳不下的内容隐藏起来时，如果使用text-overflow属性，可以在盒的末尾显示一个代表省略的符号'...'.。但是，text-overflow属性只在当盒中的内容在水平方向上超出盒的容纳范围时有效。
			通过将white-space属性设置为nowrap，使得盒右端的内容不能换行显示，这样一来，盒中的内容就在水平方向上溢出了。指定overflow属性的属性值为'hidden'，超出div元素的不分文字将会被隐藏起来。使用text-overflow属性，并且将属性值设定为'ellipsis'，则会在div元素末尾出现一个省略号。注意，在IE中书写成text_overflow,在safari中书写成-webkit-text-overflow,在Opera中书写成"-o-text-overflow",代码清单如下：
				<style type="text/css">
					div{
						overflow:hidden;
						text-overflow:ellipsis;
						-webkit-text-overflow:ellipsis;
						-o-text-overflow:ellipsis;
						white-space:nowrap;
						width:300px;
						border:solid 1px orange;
					}
				<style>
	3、对盒使用阴影
		3.1、box-shadow属性的使用方法
			可以使用box-shadow属性让盒在显示时产生阴影效果。safari写成'-webkit-boc=shadow'形式，firefox写成"-moz-box-shadow"的形式。语法规则如下：
				box-shadow:length length length color
			其中,前面三个length分别指阴影离开文字的横向距离，阴影离开文字的纵向距离和阴影的模糊半径，color阴影的颜色。
				例如：
				div{
					background-color: #ffaa00;
					box-shadow: 10px 10px 10px gray;
					width: 200px;
					height: 100px;
				}
		3.2、将参数设置为0
			把阴影的模糊半径设定为0时，将绘制不向外模糊的阴影。
			将阴影离开文字的横向距离与阴影离开文字的纵向距离均设置为0时，将在盒的周围绘制阴影。
		3.3、对盒内元素使用阴影
			可以单独对盒子内的子元素使用阴影。例如
				<style type='text/css'>
					span{
						background-color:#ffaa00;
						box-shadow:10px 10px 10px gray;
					}
				</style>
				<div>
					示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字
					<span>示例文字示例文字示例文字示例文字示例文字示例文字示例文字</span>
					示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字
				</div>
		3.4、对第一个文字或第一行使用阴影
			可以使用first-letter选择器或first-line选择器来让第一行具有阴影效果。
			<style type='text/css'>
				div:first-letter{
					font-size:22px;
					float:left;
					background-color:#ffaa00;
					box-shadow:5px 5px 5xp gray;
				}
			</style>
			<div>示例文字</div>
		3.5、对表格及单元格使用阴影
			可以使用box-shadow属性让表格及表格内的单元格产生阴影效果。
			<style type='text/css'>
				table{
					border-spacing:10px;
					box-shadow:5px 5px 20px gray;
				}
				td{
					background-color:#ffaa00;
					border-spacing:10px;
					box-shadow:5px 5px 5px gray;
					padding:10px;
				}
			</style>

			<table>
				<tr>
					<td>1</td><td>2</td><td>3</td><td>4</td><td>5</td>
				</tr>
				<tr>
					<td>1</td><td>2</td><td>3</td><td>4</td><td>5</td>
				</tr>
			</table>
	4、指定针对元素的宽度与高度的计算方法
		4.1、box-sizing属性
			使用box-sizing属性，可以指定用width属性与height属性分别指定宽度值和高度值是否包含元素内部的补白区域以及边框的宽度与高度。
			可以给box-sizing属性指定的属性值为content-box属性值与border-box属性值。cotent-box属性值表示元素的宽度与高度不包括内部补白区域，以及边框的高度与宽度。border-box属性值表示元素的宽度与高度包括内部补白区域以及边框的宽度与高度。
			例如：
			<style type='text/css'>
				div{
					width: 300px;
					border: solid 30px #ffaa00;
					padding: 30px;
					background-color: #ffff00;
					margin: 20px auto;
				}
				div#div1
				{
					box-sizing: content-box;
				}
				div#div2{
					box-sizing: border-box;
				}
			</style>
			<div id=div1>
				示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字
			</div>
			<div id=div2>
				示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字
			</div>
		4.2、为什么要使用box-sizing属性
			使用box-sizing属性的目的是控制元素的总宽度，如果不使用该属性，样式中默认使用的是xontent-box属性值，他只对内容的宽度做了一个指定，却没有对元素的总宽度进行指定。有些场合下利用border-box属性值会使页面布局更加方便。例如如下代码，只要将两个div元素的border-box属性值都设定为50%，就可以确保两个div元素的并列显示
			<stype type='text/css'>
				div{
					width:50%;
					border:solid 30px #ffaa00;
					padding:30px;
					background-color:#ffff00;
					float:left;
					box-sizing:border-box;
				}
				div#div2{
					border:solid 30px #00ffff;
				}
			</style>
			<body>
				<div id='div1'>
					示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字
				</div>
				<div id='div2'>
					示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字
				</div>
			</body>
	5.与北京个边框相关的样式
		5.1、于北京相关的属性
				属性 							功能
			background-clip					指定背景的显示范围
			background-origin				指定绘制背景图像时的起点
			background-size					指定背静中图像的尺寸
			background-break				指定内联元素的背景图像进行平铺时的循环方式

			5.1.1、指定背景的显示范围----background-clip属性
				一个具有背景的元素通常由元素的内容，内部补白（padding），边框，外部补白（margin）构成。
				背景的显示范围是指包括边框在内的范围。在Css3中，可以使用background-clip来修改背景的显示范围，如果将background-clip的属性值设定为border,则背景范围包括边框区域，如果设定为padding,则不包括边框区域。
				<style type='text/css'>
					div{
						background-color: black;
						border: dashed 30px green;
						padding: 30px;
						color: white;
						font-size: 30px;
						font-weight: bold;
						z-index: 9999;
					}	
					div.div1{
						background-clip: border-box;
						-webkit-background-clip: border-box;
					}
					div.div2{
						background-clip: padding-box
					}
				</style>

				<div clas='div1'>
					示例文字
				</div>
				<hr>
				<div class='div2'>
					示例文字
				</div>
			5.1.2、指定绘制北京图像的绘制起点
				在绘制背景图像时，默认是从内部补白区域的左上角开始，但是可以利用background-origin属性来指定绘制时从边框的左上角开始，或者从内容的左上角开始。
					background-origin的属性值有boder，padding，content。分别代表从边框的左上角，内部补白区域的左上角或内容的左上角开始绘制。
				例如：
					<style type='text/css'>
						div{
							background-color: black;
							background-image: url(img/shoe.png);
							background-repeat: no-repeat;
							border: dashed 30px green;
							padding: 30px;
							color: white;
							font-size: 2em;
							font-weight: bold;
						}
						div.div1{
							background-origin: border-box;
						}
						div.div2{
							background-origin: padding-box;
						}
						div.div3{
							background-origin: content-box;
						}						
					</style>

					<div class='div1'>
						示例文字
					</div>
					<hr>
					<div class='div2'>
						示例文字
					</div>
					<hr>
					<div class='div3'>
						示例文字
					</div>
		5.1.3、指定背景图像的尺寸 ---- background-size属性
			使用background-size属性来指定背景图像的尺寸。例如：
				<style type="text/css">
					div{
						background-color: black;
						background-image: url(img/main.jpg);
						padding: 30px;
						font-size: 2em;
						font-weight: bold;
						background-size: 100px 20px;
						
					}
				</style>

				<div>
					实例文字
				</div>
			如果要维持图像横纵比的话，可以在设定图像宽度与高度的同时，将另一个参数设定为"auto",例如，将图像高度设定为20像素，宽度设定为auto。
				<style type="text/css">
					div{
						background-color: black;
						background-image: url(img/main.jpg);
						padding: 30px;
						font-size: 2em;
						font-weight: bold;
						background-size: auto 20px;
						
					}
				</style>

				<div>
					实例文字
				</div>
			在使用background-size属性的时候，可以将宽度与高度中的一个参数省略，只指定一个参数。在这种情况下，宽度使用这个值，高度使用auto参数。
		5.1.4、指定内联元素北京图像进行平铺时的循环方式---background-break属性
			可以指定bounding-box、each-box和continuous这三种循环方式。

			将background-break属性指定为bounding-box的时候，背景图像在整个内联元素中进行平铺，指定为each-box的时候，背景图像在每一行中进行平铺，指定continuous的时候，下一行中的图像紧接着上一行中的图像继续平铺。

			只有firfox得到支持。
	5.2、在一个元素中显示多个背景图像
		例如：
		<style type="text/css">
			
			div{
				background-image: url(img/shoe.png),url(img/shoe.png),url(img/shoe12.png);
				background-repeat: no-repeat,repeat-y,no-repeat;
				background-position: left bottom,center center,right top;
				/*background-position: 20% 30%,center center,right top;*/
				padding: 90px 0px;
			}
		</style>
		<div></div>

		允许多重指定并配合着多个图像文件一起利用的属性有：
			background-image
			background-repeat
			background-position
			background-clip
			background-origin
			background-size
	5.3、使用图像边框
		5.3.1、border-image属性
			使用方法：
			border-image:url(图像文件的路径) A B C D

			属性值中至少必须指定五个参数，其中第一个参数为边框所使用的图像文件的路径，A,B,C,D四个参数便是当浏览器自动吧边框所使用到的图像进行分隔时的上边距、右边距、下边距及左边距。

			|-----------------------|
			|			⬇️A			|
			|D					   B|
			|➡️➡️					  ⬅️|
			|						|
			|						|
			|			⬆️C			|
			|-----------------------|

			图像被分为9个不分分别为
			border-top-left-image   border-top-image 	border-top-right-image
			border-left-image 								border-right-image
			border-bottom-left-image 	border-bottom-image 	border-bottom-right-image

			具体显示的时候border-top-left-image、border-top-left-image、border-bottom-right-image、border-bottom-right-image这四部分是没有任何展示效果的，不会平铺，不会重复也不会拉伸。

			对于border-top-image、border-left-image、border-bottom-image、border-right-image浏览器分别作为上边框使用图片，左边框使用图片，下边框使用图片，右边框使用图片。必要时可以将这四部分进行平铺或拉伸。


			例如：
			<style type="text/css">
		
				div{
					border: solid 5px;
					border-image: url(img/shoe.png) 10 10 10 10 ;
					width: 300px;
				}
			</style>
			<div class="my_div">
				实例文字
			</div>

		5.3.3、使用border-image来指定边框宽度
			方法如下：
				border-image:url(图像文件的路径) A、B、C、D/border-width
		5.3.4、中央图像的自动拉伸
			border-top-image、border-left-image、border-bottom-image、border-right-image这四部分自动分配为四条边所用的图像之外，讲位于中间的不分图像分配给元素边框所包围的中间区域。
		5.3.5指定四条边中图像的显示方法
			指定方法如下：
				border-image:url(文件路径) A、B、C、D/border-width topbottom leftright

				topbottom表示元素的上下两条边中图像的显示方法，leftright表示元素的左右两条边的显示方法。在现实方法中可以指定为repeat、stretch与round三种。

				*repeat:图像将以平铺的方式进行显示。
				*stretch:图像将以拉伸的方式进行显示；
				*round:与repeat相似，区别在于如果最后显示的不分不到图像的一半，就不显示最后的图像，然后扩大前面的图像，使显示区域正好完整平铺全部图像；如果能够显示的部分超过图像的一半，进显示最后的图像，但是将全部显示的图像缩小，是显示区域正好完整平铺全部图像。
	6.css3中的变形处理
		6.1、transform功能的基础知识
			transform的功能
			*：缩放：
				使用scale方法实现文字或图像的缩放处理。格式：
					transform:scale(水平放大倍率，垂直放大倍率);

			*：倾斜：
				使用skew方法来实现文字或图像的倾斜处理。格式：
					transform:skew(水平倾斜角度，垂直倾斜角度);

			*：移动
				使用translate方法来将文字或者图像进行移动。格式：
					transform:translate(水平方向上移动距离，垂直方向上移动距离);
		6.2、对一个元素使用多种变形的方法
			6.2.1、变形示例
				<style type="text/css">
		
					div{
						width: 300px;
						background-color: yellow;
						text-align: center;
						transform: translate(150px,200px) rotate(45deg) scale(0.5) skew(30deg);
					}
				</style>
				<div>
					实例文字实例文字实例文字实例文字实例文字实例文字实例文字实例文字实例文字实例文字实例文字实例文字
				</div>
			6.2.2、指定变形的基准点
				在使用transform方法进行文字或图像的变形时，是以元素的中心点为基准点进行的。使用transform-origin属性，可以改变变形的基准点。
					<style type="text/css">
		
						div{
							width: 200px;
							height: 200px;
							display: inline-block;
						}
						div#a{
							background-color: pink;
						}
						div#b{
							background-color: green;
							transform: rotate(45deg);
							transform-origin: left bottom; 
						}
					</style>
					<div id=a>
					</div>
					<div id=b>
					</div>
				指定transform-origin属性值的时候，采用"基准点在元素的水平方向上的位置，基准点在垂直防线的位置"的方法，其中"基准点在元素的水平方向上的位置"中可以指定的值为left,center,right,"基准点在元素的垂直方向上的位置"只能够可以指定的值为top、center、bottom。
	7.css3中的动画功能
		css3中的动画功能分为transitions功能和animations功能，这两种功能都可以通过改变css中的属性值来产生动画效果。

		到目前为止，tansitions功能支持从一个属性值平滑过渡到另一个属性值，animations功能支持通过关键帧的指定来在页面上产生更复杂的动画效果。
		7.1、transitions功能
			在css3中，tansitins功能通过将元素的某个属性从一个属性值在指定的时间内平滑过渡到另一个属性值来实现动画效果。
			transition：property duration timing-function
			其中property表示对那个属性进行平滑过渡，duration表示在多长时间内完成属性值的平滑过渡，timing-function表示通过什么方法来进行平滑过渡。
				例如：
					<style type="text/css">
						div{
							background-color: #ADFF2F;
							transition: background-color 1s linear;
						}
						div:hover{
							background-color: red;	
						}
					</style>
					<div id=a>
							示例文字
					</div>
			7.1.1、使用tansitions功能同时平滑过渡多个属性值
				div{
					background-color: #ADFF2F;
					color:#000000;
					width: 300px;
					transition: background-color 1s linear,color 1s linear,width 1s linear;
				}
				div:hover{
					background-color: red;	
					color:#ffffff;
					width: 400px;
				}
		7.2、Animations功能
			7.2.1、使用方法
				@keyframes 关键帧集合名{创建关键帧的代码}
				@-webkit-keyframes 关键帧集合名{创建关键帧的代码}
				@-ms-keyframes 关键帧集合名{创建关键帧的代码}
				创建关键帧的代码类似如下：
					40%{
						本关键帧的样式代码
					}
				"40%"表示改帧位于整个动画过程中的40%处，开始帧为0%，结束帧为200%。
				例如：
					<style type="text/css">
						div{
							position: absolute;
							background-color: yellow;
							top: 100px;
							width: 500px;
						}
						@keyframes mycolor{
							0%{
								background-color: red;
								transform: rotate(0deg);
							}
							40%{
								background-color: darkblue;
								transform: rotate(30deg);
							}
							70%{
								background-color: yellow;
								transform: rotate(-30deg);
							}
							100%{
								background-color: red;
								transform: rotate(0deg);
							}
						}
						div:hover{
							animation-name: mycolor;
							animation-duration: 5s;
							animation-timing-function: linear;
						}
					</style>

					<div id=a>
							示例文字
					</div>
	8.布局相关样式
		8.1、多栏布局
			8.1.1、使用float属性或positin属性的确定
				<style type="text/css">
					div{
						width:20em;
						float: left;
					}
					div#div1{
						margin-right: 2em;
					}
					div#div3{
						width: 100%;
						background-color: yellow;
						height: 200px;
					}
				</style>
				<div id="div1">
					<img src="img/shoe.png">
					<p>
						示例文字1，相对来说较长的文字，示例文字。示例文字1，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字
					</p>
				</div>
				<div id="div2">
					<p>
						示例文字2，相对来说较长的文字，示例文字。示例文字2，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字
					</p>
				</div>
				<div id="div3">
					页面中其他内容
				</div>
				div元素与div元素是各自独立的，如果在第一个div中加入一些内容的话，将会使得两个元素的底部不能对齐，导致页面多出一块空白区域。
		8.1.2、使用多栏布局方式
			<style type="text/css">
				div#div1{
					width: 40em;
					column-count: 2;
					-webkit-column-count: 2;
				}
				div#div3{
					width: 100%;
					background-color: yellow;
					height: 200px;
				}
			</style>

			<div id="div1">
				<img src="img/shoe.png">
				<p>
					示例文字1，相对来说较长的文字，示例文字。示例文字1，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字
				</p>
				<p>
					示例文字2，相对来说较长的文字，示例文字。示例文字2，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字示例文字1，相对来说较长的文字，示例文字
				</p>
			</div>
			<div id="div3">
				页面中其他内容
			</div>

			在css3中，通过column-count属性来使用多栏布局方式，该属性的含义是将一个元素中的内容分为多栏进行显示。

			使用column-width属性单独设置每一栏的宽度而不设置元素的宽度。

			使用column-gap属性设置多栏之间的间隔距离。

		8.2、盒布局
			8.2.1、盒布局的基础知识
			8.2.2、使用盒布局
				在css3中，通过box来使用盒布局。
				<style type="text/css">
					#container{
						display: -webkit-box;
					}
					#left-sidebar{
						
						width: 200px;
						padding: 20px;
						background-color: orange;
					}
					#contents{
						
						width: 300px;
						padding: 20px;
						background-color: yellow;
					}
					#right-sidebar{
						
						width: 200px;
						padding: 20px;
						background-color: limegreen;
					}
					#left-sidebar,#contents,#right-sidebar{
						box-sizing: border-box;
					}
				</style>
				<div id='container'>
					<div id=left-sidebar>
						<h2>左边边栏</h2>
					
						<ul>
							<li><a href="">超链接</a></li>
							<li><a href="">超链接</a></li>
							<li><a href="">超链接</a></li>
							<li><a href="">超链接</a></li>
							<li><a href="">超链接</a></li>
							<li><a href="">超链接</a></li>
							<li><a href="">超链接</a></li>
						</ul>
					</div>
					<div id=contents>
						<h2>内容</h2>
						<p>示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字示例文字</p>
					</div>
					<div id=left-sidebar>
						<h2>右边边栏</h2>
					
						<ul>
							<li><a href="">超链接</a></li>
							<li><a href="">超链接</a></li>
							<li><a href="">超链接</a></li>
							
						</ul>
					</div>
				</div>
				一定注意去掉float: left;属性，否则出错
				
		8.3、弹性盒布局
			8.3.1、使用自适应窗口的弹性盒布局
				使用box-flex属性，使盒布局变为弹性盒布局。
				#container{
						display: -webkit-box;
					}
					#left-sidebar{
						float: left;
						width: 200px;
						padding: 20px;
						background-color: orange;
					}
					#contents{
						float: left;
						-webkit-box-flex:1;
						padding: 20px;
						background-color: yellow;
					}
					#right-sidebar{
						float: left;
						width: 200px;
						padding: 20px;
						background-color: limegreen;
					}
					#left-sidebar,#contents,#right-sidebar{
						box-sizing: border-box;
					}
				将id=contents指定宽的的代码去掉，假如box-flex属性。
			8.3.2、改变元素的显示顺序
				使用弹性盒布局的时候，可以通过box-ordinal-group属性来改变各元素的显示顺序。
			8.3.3、改变元素的排列方式
				使用box-orient来指定多个元素的排列方式
					#container{
						display: -webkit-box;
						-webkit-box-orient:vertical;
					}
			8.3.4、元素宽度与高度自适应
				当元素排列方式被指定为垂直方向时，三个元素的高度为元素中的内容的高度，宽度自动变为容器的宽度。
				虽然使用盒布局的时候，元素的高度与宽度具有一定程度的适应行，但是容器总还是会留出一大片空白的区域。
			8.3.5、使用弹性盒布局来消除空白
				元素样式中加入box-flex属性的元素的宽度与高度总会自动扩大，使得参与排列的元素的总高度与总高度始终等于容器元素的高度与宽度。

			8.3.6、对多个元素使用box-flex属性
				在css3中，可以对多个元素使用box-flex属性。

			8.3.7、指定水平方向与垂直方向的对其方式
				使用盒布局的时候，可以使用box-pack属性及box-align属性来指定元素文字，图像以及子元素的水平方向或者处置方向的对其方式。

				属性及含义如下
				---------------------------------------------------------------
				属性值 		排列方式 		box-pack属性值含义 	box-align属性值含义
				---------------------------------------------------------------
				start 		horizontal 		左对齐				顶部对齐
				---------------------------------------------------------------
				center      horizontal 		中对齐				中部对齐
				---------------------------------------------------------------
				end 		horizontal 		右对齐 				底部对其
				---------------------------------------------------------------
				start		vertical 		顶部对其 				左对齐
				---------------------------------------------------------------
				center 		vertical 		中部对齐             中对齐
				---------------------------------------------------------------
				end 		vertical 		底部对其 				右对齐 	
				---------------------------------------------------------------
				#container{
					display: -webkit-box;
					-webkit-box-orient: horizontal;
					-webkit-box-pack: start;
					-webkit-box-align: start;
				}
	9.Media Queries相关样式
		9.1、根据浏览器的窗口大小来选择使用不同的样式
			<style type="text/css">
					body{
						margin: 20px 0px;	
					}
					#container{
						width:740px;
						float: left;
					}
					p{
						line-height: 600px;
						text-align: center;
						font-weight: bold;
						font-size: 2em;
						margin: 0 0 20px 0;
					}
					#main{
						width:520px;
						float: right;
						background-color: yellow;
					}
					#sub01{
						width: 200px;
						float: left;
						background: orange;
					}
					#sub02{
						width: 200px;
						float: right;
						background: green;
					}
					@media  screen and (min-width: 1000px) {
						#container{
							width:1000px;
							float: left;
						}
						#wapper{
							width:780px;
							float: left;
						}
						#main{
							width:560px;
							float: right;
						}
						#sub01{
							width: 200px;
							float: left;
						}
						#sub02{
							width: 200px;
							float: right;
						}
					}
					@media  screen and (min-width:640px ) and (max-width: 999px) {
						#container{
							width:640px;
							float: left;
						}
						#wapper{
							width:640px;
							float: none;
						}
						p{
							line-height: 400px;
						}
						#main{
							width:420px;
							float: right;
						}
						#sub01{
							width: 200px;
							float: left;
						}
						#sub02{
							width: 100%;
							float: none;
							clear: both;
							line-height: 150px;
						}
					}	
					@media  screen and  (max-width: 639px) {
						#container{
							width:100%;
						}
						#wapper{
							width:100%;
							float: none;
						}
						body{
							margin: 20px;
						}
						p{
							line-height: 100px;
						}
						#main{
							width:100%;
							float: none;
						}
						#sub01{
							width: 200px;
							float: left;
							line-height: 100px;
						}
						#sub02{
							width: 100%;
							float: none;
							line-height: 100px;
						}
					}	
				</style>

			<div id=container>
				<div id=wapper>
					<p id=main>main</p>
					<p id=sub01>sub 01</p>					
				</div>
				<p id=sub02>sub 02</p>
				
			</div>
		9.2、使用方法
			@media 设备类型 and (设备特性) {掩饰代码}

			设备类型表
			-----------------------------------------
			可以指定的值 						设备类型
			all 							所有设备
			screen							电脑显示器
			print 							打印用纸或打印预览试图
			handheld 						便携设备
			tv 								电视机类型设备
			speech 							语音和音频合成器
			braille 						盲人用点字法触觉回馈设备
			embossed 						盲文打印机
			projection 						各种投影设备
			tty 							使用固定密度字母栅格的媒介

			设备特性的说明
			----------------------------------------------------------------------
			特性 		可以指定的值 		是否允许使用max/min前缀 			 特性说明
			width 		带单位的长度数值 				允许 			浏览器窗口的宽度
			height 		带单位的长度数值              允许 			浏览器窗口的宽度
			device-width 	带单位的长度数值          允许 			设备屏幕分辨率宽度值
			device-height 	带单位的长度数值             允许 			设备屏幕分辨率高度值
			orientation 	只能指定两个值portrait和landscape 不允许 	浏览器窗口的方向是纵向还是横向
			aspect-ratio 	比例值 					允许 			浏览器窗口的纵横比
			device-aspect-ratio 	比例值 			允许 			屏幕分辨率的纵横比
			color 			整数值 					允许 			设备使用多少为的颜色值
			color-index     整数值 					允许 			色彩表中的色彩数
			monochrome 		整数值 					允许 			单色帧缓冲器中没像素的字节数
			resolution 		分辨率值					允许 			设备分辨率
			scan 			只能指定两个值，progressive或interlace 不允许 	电视机类设备的扫描方式。progressive：表示转行扫面，interlace表示隔行扫描
			grid 			只能指定两个值，0或1     不允许 			设备基于栅格还是基于位图

			可以在表达式中加上not关键字或者only关键字，not关键字表示对后面的表达式执行取反的操作。
			only关键字让那些不支持Media Queries但是能够读取Media Type的设备浏览器将表达式中的样式隐藏起来。

			css3中的Media Queries模块也支持对外部样式表的引用，使用方法如下：
				@import url(color.css) screen and (min-width:1000px);
				<link rel="stylesheet" type='text/css' media='screen and (min-width:1000px)' href='style.css'>

	10.css3中的其他重要样式和属性
		10.1、颜色相关样式
			10.1.1、利用alpha通道来设定颜色
				在css3中，可以通过对RGB颜色设定alpha通道的方法来定义RGBA颜色。RGBA指红色值(A)、绿色值(G)、蓝色值(B)、alpha通道值(A)来定义的颜色.
				 background-color:rgba(R,G,B,A);
			10.1.2、对HSL颜色设定alpha通道
				HSL颜色使用色调(H)、饱和度（S）、亮度(L)来定义颜色。其中，色调值中用0或360表示红色，120表示绿色，240表示蓝色。
					background-color:hsl(120,100%,50%);

					<style type="text/css">
						body{
							background-image: url(img/main.jpg);

						}
						div{
							width:100%;
							height: 100px;
							color: white;
						}
						div#div1{
							background-color: hsl(120,100%,50%);
							color: hsla(0,100%,100%,0);
						}
						div#div2{
							background-color: hsla(120,100%,50%,0.5);
							color: hsla(0,100%,100%,0);
						}
					</style>
					<div id=div1></div>
					<div id=div2></div>
			10.1.3、alpha通道与opacity属性的区别
				使用alpha通道对元素设定的透明度时，可以单独针对元素的背景文字颜色等来指定透明度，而opacity属性只能指定整个元素的透明度。
			10.1.4、指定颜色值为tansparent 
				如果将颜色值设置为tansparent，则会将背景、文字或边框等的颜色设定为完全透明。
		10.2、用户界面相关样式
			10.2.1、轮廓相关样式
				outline用来在元素周围绘制一条轮廓线，可以起到突出元素的作用。
				outline:outline-color outline-style outline-width

				在css3中新增的out-offset属性
				out-offset属性使用方法很简单，只要给该属性指定一个带像素单位的整数值即可，该整数表示向外偏离多少像素：
					out-offset:2px;
			10.2.2、resize属性
				允许用户通过拖动的方式来修改元素的尺寸。只要用于可以使用overflow属性的任何容器的元素中。
					<style type="text/css">
						#div1{
							background-color: pink;
							overflow: auto;
							resize: both;
							width: 150px;
							height: 150px;
						}
						#div2{
							background-color: orange;
							width: 100%;
							height: 150px;
						}
					</style>
				
					<div id=div1>示例文字</div>
					<div id=div2>页面中其他内容</div>
					<div>
				resize属性指定的值分为以下几种：
					none:用户不能修改元素尺寸。
					both:用户可以修改元素的宽度和高度。
					horizontal:用户只能修好宽度。
					vertical:用户只能修改高度。
					inherit:继承父元素的resize属性值。
		10.3、取消对元素的样式指定----initial属性值
			10.3.1、取消对元素的样式指定
				在css3中新增一个initial属性值，使用这个initial属性值可以直接取消对某个元素的样式指定。
				<style type="text/css">
						p{
							color:blue;
							font-family: arial;	
						}
						p#text01{
							color: initial;
							font-family: "微软雅黑";
						}
					</style>
					<p id="text01">示例文字1</p>
					<p id="text02">示例文字2</p>
					<p id="text03">示例文字3</p>
其他：	
	去掉li前面的点
		li{
			list-style-type: none;
		}
